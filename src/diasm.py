from __future__ import division # to float division
import distorm3 # distorm disassembler library
import os, sys
from operator import itemgetter # to sort dictionary
import collections # to comparasion


def distormDisassemble(filename,code, bits, countStatisticsResult= False):
	# start function variables
	distormOpcodeDict	= dict() # key = opcode, value = count
	distormFilename		= filename+".opcode"
	distormOpcodeList	= []

	# Output file for opcodes
	distormFile  = open(distormFilename, 'w')
	#distormFile.write(filename+";")
	
	# define distorm arguments
	offset   = 0
	length   = None
	
	if bits == '16bit':
		mode = distorm3.Decode16Bits
	elif bits == '32bit':
		mode = distorm3.Decode32Bits
	else:
		mode = distorm3.Decode64Bits

	# Decoded instruction
	iterable = distorm3.DecodeGenerator(offset, code, mode)
		
	for (offset, size, instruction, hexdump) in iterable:
		print("%.8x: %-32s %s" % (offset, hexdump, instruction))

		distormFile.write(instruction+"\n")	# write opcode to file

	
	print filename+" is disassembled."
	return distormOpcodeList
	
def Disassemble(filename, bits='32bit'):


	# start function variables
	(file, ext) = os.path.splitext(filename)

	code = ""
	# Read the code from the file
	try:
		code = open(filename, 'rb').read()
	except Exception as err:
		print str(err)
	
	distormOpcodeList = distormDisassemble(file,code, bits)
		
exefilename = sys.argv[1]
Disassemble(exefilename)


