from __future__ import division # to float division
import distorm3 # distorm disassembler library
from capstone import * # capstone disassembler library
import os
from operator import itemgetter # to sort dictionary
import collections # to comparasion


def clear(folderPath, fileExtension):
	'''
		Delete files with specific extension in given folder

	'''
	for root, dirs, files in os.walk(folderPath):
		for file in files:
			if not file.endswith(fileExtension) :
				print os.path.join(root, file)+" is removed"
				os.remove(os.path.join(root, file))
			#Disassemble(os.path.join(root, file),"32bit",False,True)	
			
def countStatisticResult(opcodeDictionary, filename):
	opcodeSum = sum(opcodeDictionary.values())		
	#print "- Total Instruction Num : "+str(opcodeSum)
	outfile = open("totalInstruction.txt", 'a')
	outfile.write(filename+" "+str(opcodeSum)+"\n")
		
	sortedOpcodeList  = sorted(opcodeDictionary.items(), key=itemgetter(1),reverse=True) 
	#print sortedOpcodeList
		
	opcodePercentList = []
	
	for opcode, count in sortedOpcodeList:
	
		percent = float("{0:.2f}".format((100*count)/opcodeSum))
		opcodePercentList.append(opcode+" "+str(count)+" "+str(percent))
			
	outfile = open(filename+".opcode2", 'w')
	outfile.write('\n'.join('%s' % x for x in opcodePercentList))	
	
	
def distormDisassemble(filename,code, bits, countStatisticsResult= False):
	# start function variables
	distormOpcodeDict	= dict() # key = opcode, value = count
	distormFilename		= filename+".opcode"
	distormOpcodeList	= []

	# Output file for opcodes
	distormFile  = open(distormFilename, 'w')
	#distormFile.write(filename+";")
	
	# define distorm arguments
	offset   = 0
	length   = None
	
	if bits == '16bit':
		mode = distorm3.Decode16Bits
	elif bits == '32bit':
		mode = distorm3.Decode32Bits
	else:
		mode = distorm3.Decode64Bits

	# Decoded instruction
	iterable = distorm3.DecodeGenerator(offset, code, mode)
		
	for (offset, size, instruction, hexdump) in iterable:
		# print("%.8x: %-32s %s" % (offset, hexdump, instruction))

		opcode = instruction.split(" ")[0].lower()	# get opcode
		
		distormOpcodeList.append(opcode)	# add opcode to List
		distormFile.write(opcode+",")	# write opcode to file

		if countStatisticsResult : # count opcode value for statistics results
			# count opcode number
			if opcode in distormOpcodeDict:
				distormOpcodeDict[opcode] += 1
			else:
				distormOpcodeDict[opcode]  = 1

	if countStatisticsResult : # count opcode statistics results and write them file
		countStatisticResult(distormOpcodeDict, filename)
	
	print filename+" is disassembled."
	return distormOpcodeList

	
def capstoneDisassemble(filename,code,bits,countStatisticsResult= False):	
	# start function variables
	capstoneOpcodeDict	= dict() # key = opcode, value = count
	capstoneFilename	= filename+".capstone"
	capstoneOpcodeList	= []

	# Output file for opcodes
	capstoneFile = open(capstoneFilename, 'w')
	#capstoneFile.write(filename+";")
	if bits == '16bit':
		mode = CS_MODE_16
	elif bits == '32bit':
		mode = CS_MODE_32
	else:
		mode = CS_MODE_64

	#generateOpCodeFromHex(code)
	md = Cs(CS_ARCH_X86, mode)
	for (address, size, mnemonic, op_str) in md.disasm_lite(code, 0x1000):
		
		opcode = str(mnemonic)
		
		capstoneOpcodeList.append(opcode) 
		#print"%s" %(i.mnemonic) #print"0x%x:\t%s\t\t%s" %(i.address, i.mnemonic, i.op_str)
		capstoneFile.write(opcode+",")
		
		if countStatisticsResult :
			# count opcode number
			if opcode in capstoneOpcodeDict:
				capstoneOpcodeDict[opcode] += 1
			else:
				capstoneOpcodeDict[opcode]  = 1

	if countStatisticsResult:
		countStatisticResult(capstoneOpcodeDict, filename)
	
	print filename+" is disassembled."	
	return capstoneOpcodeList

	
def Disassemble(filename, bits='32bit',capstone=True, distorm=True,compare=False):
	"""Disassemble binary code with distorm3 and capstone.

    @param filename : executable file
    @param bits     : file bits ; 16bit, 32bit or 64bit decoding
	@param capstone : capstone disassebly is used or not
	@param distorm  : capstone disassebly is used or not
	@param compare  : comparasion of distorm and capstone
 
    @returns: tuple of (offset, instruction, hex bytes)
    """

	# start function variables
	(file, ext) = os.path.splitext(filename)

	code = ""
	# Read the code from the file
	try:
		code = open(filename, 'rb').read()
	except Exception as err:
		print str(err)
	
	
	if distorm :
		distormOpcodeList 	=	distormDisassemble(file,code, bits)
		
	if capstone :
		capstoneOpcodeList	=	capstoneDisassemble(file,code,bits)
		
	if compare :
		# compare two list

		compare = lambda x, y: collections.Counter(x) == collections.Counter(y)
		print compare(capstoneOpcodeList, distormOpcodeList)
		print set(capstoneOpcodeList) == set (distormOpcodeList)

def DisassembleFolder(directory):
	""""Disassemble all file under directory which given as parameter

	"""
	
	for root, dirs, files in os.walk(directory):
		for file in files:
			Disassemble(os.path.join(root, file),"32bit",False,True)

# Running ....		
# Disassembly function test ######################################################################################################
DisassembleFolder('/home/mint/workspace/malwareDetection/dataSet/OPCODE/')
#clear('/home/mint/workspace/malwareDetection/dataSet/OPCODE/malware/NGVCK2/','.opcode')
#########################################################################
