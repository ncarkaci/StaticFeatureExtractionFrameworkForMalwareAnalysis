from __future__ import division # to float division
import distorm3 # distorm disassembler library
import os, sys
from operator import itemgetter # to sort dictionary
import collections # to comparasion


def distormDisassemble(filename,code, bits, countStatisticsResult= False):
	# start function variables
	distormOpcodeDict	= dict() # key = opcode, value = count
	distormFilename		= filename+".asm"
	distormOpcodeList	= []

	# Output file for opcodes
	distormFile  = open(distormFilename, 'w')
	#distormFile.write(filename+";")
	
	# define distorm arguments
	offset   = 0
	length   = None
	
	if bits == '16bit':
		mode = distorm3.Decode16Bits
	elif bits == '32bit':
		mode = distorm3.Decode32Bits
	else:
		mode = distorm3.Decode64Bits

	# Decoded instruction
	iterable = distorm3.DecodeGenerator(offset, code, mode)
		
	for (offset, size, instruction, hexdump) in iterable:
		print("%.8x: %-32s %s" % (offset, hexdump, instruction))

		distormFile.write(instruction+"\n")	# write opcode to file

	
	print (filename+" is disassembled.")
	return distormOpcodeList

'''
# Disassemble given files
#
# filename : file path
# bits : file bit (16, 32 0r 64). 32 bit default value this parameter
# 
# return : no return value. Write disassembled result into a file which has extension .opcode 
'''	
def Disassemble(filename, bits='32bit'):


	# start function variables
	(file, ext) = os.path.splitext(filename)

	code = ""
	# Read the code from the file
	try:
		code = open(filename, 'rb').read()
	except Exception as err:
		print (str(err))
	
	distormOpcodeList = distormDisassemble(file,code, bits)
		
def DisassembleFolder(directory):
	""""Disassemble all file under directory which given as parameter
	"""
	
	for root, dirs, files in os.walk(directory):
		for file in files:
			Disassemble(os.path.join(root, file))

if __name__ == '__main__':
	
	parser = argparse.ArgumentParser(description="Disassemble files")
	parser.add_argument("-d", "--directory", default = '', help="Directory path")

	args = parser.parse_args()

	if args.directory :
		directory = args.directory 
		DisassembleFolder(directory)
	else :
		filename = sys.argv[1]
		Disassemble(filename)

